import time
import warnings
import os
import glob
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib as mpl
import pldspectrapy.td_support
from pldspectrapy import misc_tools, fit_data

#######################################################
#   Suppress UserWarning generated by fitting
#######################################################
warnings.filterwarnings("ignore", category=UserWarning)
#######################################################

#######################################################
#   Plot formatting
#######################################################
mpl.rcParams["backend"] = "TkAgg"
mpl.rcParams["pdf.fonttype"] = 42
mpl.rcParams["ps.fonttype"] = 42
mpl.rcParams["font.family"] = "Arial"
plt.rcParams.update({"figure.autolayout": True, "lines.linewidth": 0.65})
plt.rcParams.update({"mathtext.default": "regular"})
#######################################################

start_time = time.time()

# File paths
directory_path = r"D:\FLARE\data\Nico burn meas"
lookup_table_path = r"src/methane_absorption_multiple_conditions.csv"
file_list = glob.glob(os.path.join(directory_path, "*.cor"))

# Load the CSV lookup table
if os.path.exists(lookup_table_path):
    lookup_table = pd.read_csv(lookup_table_path)
else:
    raise FileNotFoundError("Lookup table CSV file not found.")

# Helper function to retrieve spectral data from the lookup table
def get_spectral_data_from_csv(lookup_table, temperature, mole_fraction, x_wvn):
    """
    Retrieve spectral data from CSV lookup table.

    Parameters
    ----------
    lookup_table : pd.DataFrame
        DataFrame containing the lookup table.
    temperature : float
        Temperature in K.
    mole_fraction : float
        Mole fraction of the gas.
    x_wvn : numpy array
        Wavenumber array.

    Returns
    -------
    spectral_data : numpy array
        The spectral data matching the conditions.
    """
    matching_rows = lookup_table[
        (lookup_table["Temperature (K)"] == temperature) &
        (lookup_table["Mole Fraction"] == mole_fraction)
    ]

    if matching_rows.empty:
        raise ValueError(f"No matching data for T={temperature}, mole_fraction={mole_fraction}.")

    # Interpolate data for the provided wavenumbers
    spectral_data = np.interp(
        x_wvn, matching_rows["Wavenumber (cm⁻¹)"], matching_rows["Absorption Coefficient"]
    )
    return spectral_data

# Number of files to process
n = min(10, len(file_list))  # Limit processing to 10 files

# Default parameters (update these as needed)
DEFAULT_TEMPERATURE = 298  # Default temperature in K
DEFAULT_MOLE_FRACTION = 0.1  # Default mole fraction

for i in range(n):
    try:
        filepath = file_list[i]
        print(f"Processing file: {filepath}")

        # Load the data file
        daq_file = pldspectrapy.open_daq_files(filepath)

        # Extract temperature and mole fraction or use defaults
        temperature = DEFAULT_TEMPERATURE
        mole_fraction = DEFAULT_MOLE_FRACTION

        # Pass minimal configuration to `prep_for_processing`
        minimal_config = {"temperature": temperature, "mole_fraction": mole_fraction}

        # Prepare the file for processing
        daq_file.prep_for_processing(minimal_config)

        # Generate spectrum from the `.cor` file
        x_wvn, transmission = pldspectrapy.td_support.create_spectrum(daq_file)

        # Retrieve spectral data from the lookup table
        spectral_data = get_spectral_data_from_csv(lookup_table, temperature, mole_fraction, x_wvn)

        # Perform fitting using the lookup table spectrum
        Fit = fit_data(x_wvn, spectral_data)
#
        # Optionally, save results or generate output
        print(Fit.fit_report())

    except Exception as e:
        print(f"Error processing file {filepath}: {e}")

end_time = time.time()
print(f"Elapsed time: {end_time - start_time}")
