import time
import warnings
import os
import glob
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib as mpl
import pldspectrapy.td_support
from pldspectrapy import misc_tools, fit_data
from pldspectrapy.config_handling import load_config_json

#######################################################
#   Suppress UserWarning generated by fitting
#######################################################
warnings.filterwarnings("ignore", category=UserWarning)
#######################################################
#######################################################

#######################################################
#   Plot formatting
#######################################################
mpl.rcParams["backend"] = "TkAgg"
mpl.rcParams["pdf.fonttype"] = 42
mpl.rcParams["ps.fonttype"] = 42
mpl.rcParams["font.family"] = "Arial"
plt.rcParams.update({"figure.autolayout": True, "lines.linewidth": 0.65})
plt.rcParams.update({"mathtext.default": "regular"})
#######################################################
#######################################################

start_time = time.time()

os.environ["GAAS_OCL_DEVICE"] = "0"  # Set to the device number you want to use

config_path = os.path.join("C:\\git\\flare", "flare_config_1mod.json5")

# Load the configuration file into a dictionary
config_variables = load_config_json(config_path)

# User option to show the fit plots of the example spectrum
create_plots = config_variables["input"]["fit_plots"]

# Directory and file handling
directory_path = r"D:\FLARE\data\Nico burn meas"
file_list = glob.glob(os.path.join(directory_path, "*.cor"))

# Load the CSV lookup table
lookup_table_path = r"D:\FLARE\data\lookup_table.csv"
if os.path.exists(lookup_table_path):
    lookup_table = pd.read_csv(lookup_table_path)
else:
    lookup_table = None
    raise FileNotFoundError("Lookup table CSV file not found.")

# Helper function to retrieve spectral data from CSV
def get_spectral_data_from_csv(lookup_table, config_variables, x_wvn):
    """
    Retrieve spectral data from CSV lookup table.

    Parameters
    ----------
    lookup_table : pd.DataFrame
        DataFrame containing the lookup table.
    config_variables : dict
        Configuration dictionary with fitting parameters.
    x_wvn : numpy array
        Wavenumber array.

    Returns
    -------
    spectral_data : numpy array
        The spectral data matching the conditions, or None if not found.
    """
    if lookup_table is None:
        raise ValueError("Lookup table is not loaded.")

    temperature = config_variables["fitting"]["temperature"]
    mole_fraction = config_variables["fitting"]["molefraction"]

    # Filter matching rows in the CSV table
    matching_rows = lookup_table[
        (lookup_table["Temperature (K)"] == temperature) &
        (lookup_table["Mole Fraction"] == mole_fraction)
    ]

    if not matching_rows.empty:
        # Interpolate data for the provided wavenumbers
        spectral_data = np.interp(
            x_wvn, matching_rows["Wavenumber (cm⁻¹)"], matching_rows["Absorption Coefficient"]
        )
        return spectral_data

    raise ValueError("No matching spectral data found in the lookup table.")

# Number of files to process
n = min(10, len(file_list))  # Ensure we do not exceed the number of files

for i in range(n):
    try:
        filename = os.path.basename(file_list[i])  # Extract filename only
        filepath = file_list[i]  # Use the full path from file_list
        config_variables["input"]["filename"] = filepath
        print(f"Processing file: {filepath}")

        # Load the data file
        daq_file = pldspectrapy.open_daq_files(filepath)

        # Prepare the file for processing
        daq_file.prep_for_processing(config_variables)

        # Generate spectrum from the `.cor` file
        x_wvn, transmission = pldspectrapy.td_support.create_spectrum(
            daq_file, config_variables
        )

        # Retrieve spectral data for fitting directly from the lookup table
        spectral_data = get_spectral_data_from_csv(lookup_table, config_variables, x_wvn)

        # Perform fitting using the lookup table spectrum
        Fit = fit_data(x_wvn, spectral_data, config_variables)

        # Generate output and save results
        results_df = pldspectrapy.config_handling.generate_output_and_save(
            Fit, config_variables
        )

        # Optionally, plot results
        if create_plots:
            pldspectrapy.plotting_tools.plot_fit_td(Fit, config_variables)
            pldspectrapy.plotting_tools.plot_fit_freq(Fit, config_variables)

        # Print a report
        print(Fit.fit_report())

    except Exception as e:
        print(f"Error processing file {file_list[i]}: {e}")

end_time = time.time()
print(f"Elapsed time: {end_time - start_time}")
