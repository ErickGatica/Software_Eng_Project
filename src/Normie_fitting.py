import time
import warnings
import os
import glob
import matplotlib.pyplot as plt
from scipy import interpolate as intrp
import allantools as ad
import pickle as pkl
import numpy as np
import pandas as pd
import matplotlib as mpl
import pldspectrapy.td_support
from pldspectrapy import misc_tools, fit_data
from pldspectrapy.config_handling import load_config_json

#######################################################
#   Suppress UserWarning generated by fitting
#######################################################
warnings.filterwarnings("ignore", category=UserWarning)
#######################################################
#######################################################

#######################################################
#   Plot formatting
#######################################################
mpl.rcParams["backend"] = "TkAgg"
mpl.rcParams["pdf.fonttype"] = 42
mpl.rcParams["ps.fonttype"] = 42
mpl.rcParams["font.family"] = "Arial"
plt.rcParams.update({"figure.autolayout": True, "lines.linewidth": 0.65})
plt.rcParams.update({"mathtext.default": "regular"})
#######################################################
#######################################################

datefmt = "%Y/%m/%d %H:%M:%S"

start_time = time.time()

os.environ["GAAS_OCL_DEVICE"] = "0"  # Set to the device number you want to use if you

config_path = os.path.join("C:\\git\\flare", "flare_config_1mod.json5")

# Load the configuration file into a dictionary
config_variables = load_config_json(config_path)

# User option to show the fit plots of the example spectrum
create_plots = config_variables["input"]["fit_plots"]

# Directory and file handling
directory_path = r"D:\FLARE\data\Nico burn meas"
file_list = glob.glob(os.path.join(directory_path, "*.cor"))

# Initialize hapi database if needed
if config_variables["fitting"]["simulation_backend"] != "gaas":
    pldspectrapy.td_support.initialize_hapi_db(
        config_variables["input"]["linelist_path"]
    )

# Number of files to process
n = min(10, len(file_list))  # Ensure we do not exceed the number of files

for i in range(n):
    try:
        filename = os.path.basename(file_list[i])  # Extract filename only
        filepath = file_list[i]  # Use the full path from file_list
        config_variables["input"]["filename"] = filepath
        print(f"Processing file: {filepath}")

        # Load the data file
        daq_file = pldspectrapy.open_daq_files(filepath)

        # Prepare the file for processing
        daq_file.prep_for_processing(config_variables)

        # Generate spectrum
        x_wvn, transmission = pldspectrapy.td_support.create_spectrum(
            daq_file, config_variables
        )

        # Perform fitting or other analysis
        Fit = fit_data(x_wvn, transmission, config_variables)

        # Generate output and save results
        results_df = pldspectrapy.config_handling.generate_output_and_save(
            Fit, config_variables
        )

        # Optionally, plot results
        if create_plots:
            pldspectrapy.plotting_tools.plot_fit_td(Fit, config_variables)
            pldspectrapy.plotting_tools.plot_fit_freq(Fit, config_variables)

        # Print a report
        print(Fit.fit_report())

    except Exception as e:
        print(f"Error processing file {file_list[i]}: {e}")

end_time = time.time()
print(f"Elapsed time: {end_time - start_time}")